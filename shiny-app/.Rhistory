<<<<<<< 98a0636641c7cb097d770aedc68268674be130d4
shiny::runApp()
shiny::runApp()
shiny::runApp()
Vector = c(name, testData, rate)
# Set the plot title
shiny::runApp()
shiny::runApp()
y = PlotData[[3]],
shiny::runApp()
xList = list(title = "Score", titlefont = fontset)
=======
summarise(
lang_repos = count(language),
avg_forks = mean(forks_count)
)
summary_data <- repo_df %>%
group_by(language) %>%
summarise(
lang_repos = n(),
avg_forks = mean(forks_count),
lang = language
)
help("n")
summary_data <- repo_df %>%
group_by(language) %>%
summarise(
lang_repos = n(),
avg_forks = mean(forks_count)
)
View(summary_data)
names(summary_data) <- c("Language, Number of repositories, Average number of forks")
names(summary_data) <- c("Language", "Number of repositories", "Average number of forks")
summary_table <- kable(summary_data, format = "markdown")
hist(small_repo_df)
hist(small_repo_df$`Number of Forks`)
hist(small_repo_df$Name, small_repo_df$`Number of Forks`)
hist(small_repo_df$Name)
graph.data.frame(summary_data)
library(MASS)
barplot(summary_table)
barplot(table(summary_data$`Number of repositories`))
barplot(table(summary_data$Language))
View(summary_data)
barplot(table(summary_data$`Number of repositories`))
barplot(table(repo_df$language)
barplot(table(repo_df$language))
barplot(repo_df$language)
table(repo_df$language)
barplot(table(repo_df$language))
barplot(table(repo_df$language))
user <- "ericsueckert"
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
View(repo_data)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
# create a smaller data frame with some relevant information. make column titles more readable
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
View(small_repo_df)
View(small_repo_df)
View(repo_df)
View(most_popular)
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
View(small_repo_df)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
summary_data <- repo_df %>%
group_by(language) %>%
summarise(
lang_repos = n(),
avg_forks = mean(forks_count)
)
View(summary_data)
names(summary_data) <- c("Language", "Number of repositories", "Average number of forks")
summary_table <- kable(summary_data, format = "markdown")
barplot(table(repo_df$language))
---
title: "index"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
# Include packages
library(jsonlite)
library(dplyr)
library(knitr)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
```
![User avatar](`r repo_df$owner.avatar_url`)
Hello.
The user `r user` has `r num_repos` repositories, and the most popular one has `r most_popular` forks.
```{r, echo=FALSE}
# create a smaller data frame with some relevant information. make column titles more readable
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
```
Here is a table showing the Name, descrption, number of forks, owner ID, and date created of each repository.
```{r, echo=FALSE}
# display the table
data_table <- kable(small_repo_df, format = "markdown")
```
`r data_table`
Here is a table showing the number of repositories for each programming language, and the average number of forks per language.
```{r, echo=FALSE}
#create a table with some summary information from the repositories, make column names readable, and display
summary_data <- repo_df %>%
group_by(language) %>%
summarise(
lang_repos = n(),
avg_forks = mean(forks_count)
)
names(summary_data) <- c("Language", "Number of repositories", "Average number of forks")
summary_table <- kable(summary_data, format = "markdown")
```
`r summary_table`
```{r, echo=FALSE}
# A bar plot showing number of repositories per language
barplot(table(repo_df$language))
```
---
title: "index"
output: html_document
---
```{r, echo=FALSE, message=FALSE}
# Include packages
library(jsonlite)
library(dplyr)
library(knitr)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
```
![User avatar](`r repo_df$owner.avatar_url`)
Hello.
The user `r user` has `r num_repos` repositories, and the most popular one has `r most_popular` forks.
```{r, echo=FALSE}
# create a smaller data frame with some relevant information. make column titles more readable
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
```
Here is a table showing the Name, descrption, number of forks, owner ID, and date created of each repository.
```{r, echo=FALSE}
# display the table
data_table <- kable(small_repo_df, format = "markdown")
```
`r data_table`
Here is a table showing the number of repositories for each programming language, and the average number of forks per language.
```{r, echo=FALSE}
#create a table with some summary information from the repositories, make column names readable, and display
summary_data <- repo_df %>%
group_by(language) %>%
summarise(
lang_repos = n(),
avg_forks = mean(forks_count)
)
names(summary_data) <- c("Language", "Number of repositories", "Average number of forks")
summary_table <- kable(summary_data, format = "markdown")
```
`r summary_table`
```{r, echo=FALSE}
# A bar plot showing number of repositories per language
barplot(table(repo_df$language))
```
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
```
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
library(dplyr)
library(knitr)
library(jsonlite)
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
library(dplyr)
library(jsonlite)
library(dplyr)
library(knitr)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
repo_df$owner.avatar_url
repo_df$owner.avatar_url[1]
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "INFO-498F"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
library(dplyr)
library(dplyr)
library(knitr)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "INFO-498F"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
detach("package:MASS", unload=TRUE)
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
# create variables for different parts of the query url
access_token <- "?access_token=035bfac119146d61224807b2d9fbc935f04b9d63"
base_url <- "https://api.github.com/users/"
user <- "ericsueckert"
parameters <- "&per_page=100&created=desc"
# put together query url
query_url <- paste0(base_url, user, access_token, parameters)
# grab repository query url from user data from user query, then store repository data
user_data <- fromJSON(query_url)
repo_data <- fromJSON(user_data$repos_url)
# flatten data so it is all visible in one df
repo_df <- flatten(repo_data)
# determine number of repositories and most forked repository
num_repos <- nrow(repo_df)
most_popular <- repo_df %>%
select(forks_count) %>%
filter(forks_count == max(forks_count))
repo_df <- mutate(repo_df, date = format(as.Date(created_at), format="%B %d %Y"))
small_repo_df <- select(repo_df, name, description, forks_count, owner.login, date)
names(small_repo_df) <- c("Name", "Description", "Number of Forks", "Owner ID", "Date Created")
# display the table
data_table <- kable(small_repo_df, format = "markdown")
summary_data <- repo_df %>%
group_by(language) %>%
summarise(
lang_repos = n(),
avg_forks = mean(forks_count)
)
names(summary_data) <- c("Language", "Number of repositories", "Average number of forks")
summary_table <- kable(summary_data, format = "markdown")
repo_df$owner.avatar_url
repo_df$owner.avatar_url[1]
repo_data$owner$avatar_url
library(shiny)
iris
iris
df <- iris
View(df)
library(dplyr)
library(plotly)
avgs <- df %>%
group_by(Species) %>%
summarise(
avg_sepal_length = mean(Sepal.Length),
avg_sepal_width = mean(Sepal.Width),
avg_petal_length = mean(Petal.Length),
avg_petal_width = mean(Petal.Width)
)
View(avgs)
iris
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
df <- iris
spec <- input$species
spec <- input$species
xaxis <- eval(parse(text = input$dim1))
yaxis <- eval(parse(text = input$dim2))
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
plot_ly(df, x = df$Sepal.Length, y = df$Sepal.Width, mode = "markers")
layout(p, xaxis = list(title = "Date"), yaxis = list(title = "Casualties"))
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
xlabel <- sub(".", "\\s", "Sepal.Length")
xlabel <- sub(".", " ", "Sepal.Length")
xlabel <- sub("\\.", " ", "Sepal.Length")
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
layout(title = '2015 US city mass shootings', geo = g)
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
temp <- filter(df, Species == "setosa")
View(temp)
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
temp <- filter(df, Species == "setosa")
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/a8-building-applications')
library(rsconnect)
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
rsconnect::deployApp('/Users/Potato/Documents/info498/a8-building-applications')
shiny::runApp('Documents/info498/Final-Project-X/shiny-app')
shiny::runApp('Documents/info498/Final-Project-X/shiny-app')
shiny::runApp('Documents/info498/Final-Project-X/shiny-app')
shiny::runApp('Documents/info498/Final-Project-X/shiny-app')
shiny::runApp('Documents/info498/Final-Project-X/shiny-app')
shiny::runApp('Documents/info498/Final-Project-X/shiny-app')
shiny::runApp('Documents/info498/Final-Project-X/shiny-app')
shiny::runApp('Documents/info498/Final-Project-X/shiny-app')
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
df$hover <- paste(df$INSTNM, "has", df$ADM_RATE, "percent of admission rate",
'<br>', "Location:",df$CITY, df$ZIP)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 1,
subunitwidth = 1)
p <- plot_ly(df, lat = LATITUDE, lon = LONGITUDE, text = hover, color = ADM_RATE,
type = 'scattergeo', locationmode = 'USA-states', mode = "markers", marker = m)
layout(p, title = "US College Cards", geo = g)
df<- read.csv("data/Summarized data.csv")
setwd("/Users/Potato/Documents/info498/Final-Project-X/shiny-app")
df<- read.csv("data/Summarized data.csv")
build_map(df)
source('scripts/build_map.r')
build_map(df)
shiny::runApp()
library(plotly)
shiny::runApp('~/Documents/info498/test')
shiny::runApp()
#                    tabPanel("ACT and SAT Plots",
#                             # Apply the title panel
#                             titlePanel("SAT and ACT scores"),
#
#                             sidebarLayout(
#                               sidebarPanel(
#                                 # Createa a check group that shows which species should be shown on the display
#                                 checkboxGroupInput("actPercentile", label = h3("Select ACT Percentile"),
#                                                    choices = list("25th Percentile" = "75", "Mid Percentile" = "MID", "75th Percentile" = "75"),
#                                                    selected = "MID"
#                                 ),
#
#                                 # Select the variable that will be used on the x axis
#                                 selectInput("actSubject", label = h3("Select ACT Subject"),
#                                             choices = list("English" = "ACTEN", "Writing" = "ACTWR",
#                                                            "Math" = "ACTMT", "Cumulative" = "ACTCM"),
#                                             selected = "ACTEN"
#                                 ),
#
#                                 # Input line break
#                                 hr(),
#
#                                 checkboxGroupInput("satPercentile", label = h3("Select SAT Percentile"),
#                                                    choices = list("25th Percentile" = "75", "Mid Percentile" = "MID", "75th Percentile" = "75"),
#                                                    selected = "MID"
#                                 ),
#
#                                 # Select the variable that will be used on the y axis
#                                 selectInput("satSubject", label = h3("Select SAT Subject"),
#                                             choices = list("Reading" = "SATVR", "Writing" = "SATWR",
#                                                            "Math" = "SATMT"),
#                                             selected = "SATVR"),
#
#                                 # Input line break
#                                 hr()
#                               ),
#                               mainPanel(
#                                 plotlyOutput("actPlot"),
#                                 hr(),
#                                 plotlyOutput("satPlot")
#                               )
#                             )
#                    ),
tabPanel("FAQ",
fluidPage(
includeHTML("scripts/FAQ.html")
)
),
tabPanel("Reference",
fluidPage(
includeHTML("scripts/reference.html")
)
)
tabPanel("FAQ",
fluidPage(
includeHTML("scripts/FAQ.html")
)
),
tabPanel("Reference",
fluidPage(
includeHTML("scripts/reference.html")
)
)
tabPanel("FAQ",
fluidPage(
includeHTML("scripts/FAQ.html")
)
),
tabPanel("Reference",
fluidPage(
includeHTML("scripts/reference.html")
)
)
shiny::runApp()
>>>>>>> NO ONE TOUCH THESE NEW FILES WITHOUT TALKING TO ME
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
