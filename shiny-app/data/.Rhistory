data<- datasets::iris
set.seed(10)
build<- function(width, column){
data$hover<- with(data, paste(Species, '<br>', "Sepal width:", Sepal.Width, '<br>', "Sepal length:",Sepal.Length))
map<- plot_ly(width, z = eval(parse(text = column))
x = width,
y = Sepal.Width,
text = hover
mode = "markers",
color = Sepal.Length
size = Sepal.Length
return(map)
)
}
build<- function(width, column){
data$hover<- with(data, paste(Species, '<br>', "Sepal width:", Sepal.Width, '<br>', "Sepal length:",Sepal.Length))
map<- plot_ly(width, z = eval(parse(text = column)
x = width,
y = Sepal.Width,
text = hover
mode = "markers",
color = Sepal.Length
size = Sepal.Length
return(map)
))
}
build<- function(width, column){
data$hover<- with(data, paste(Species, '<br>', "Sepal width:", Sepal.Width, '<br>', "Sepal length:",Sepal.Length)),
map<- plot_ly(width, z = eval(parse(text = column)
x = width,
y = Sepal.Width,
text = hover
mode = "markers",
color = Sepal.Length
size = Sepal.Length
return(map)
))
}
data<- datasets::iris
data$hover<- with(data, paste(Species, '<br>', "Sepal width:", 'Sepal.Width', '<br>', "Sepal length:",'Sepal.Length')),
data$hover<- with(data, paste(Species, '<br>', "Sepal width:", 'Sepal.Width', '<br>', "Sepal length:",'Sepal.Length'))
map<- plot_ly(width, z = eval(parse(text = column)
x = width,
y = Sepal.Width,
text = hover
mode = "markers",
color = Sepal.Length
size = Sepal.Length
return(map)
))
}
map<- plot_ly(data, z = eval(parse(text = column)
x = width,
y = Sepal.Width,
text = hover
mode = "markers",
color = Sepal.Length
size = Sepal.Length
return(map)
))
}
graph<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
set.seed(100)
plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
set.seed(100)
graphy<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
set.seed(100)
graphy<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
set.seed(100)
graph<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
library(shiny)
library(dplyr)
library(plotly)
data<- datasets::iris
set.seed(100)
graph<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
data$hover<- with(data, paste(Species, '<br>', "Sepal width:", 'Sepal.Width', '<br>', "Sepal length:",'Sepal.Length'))
data$hover<- with(data, paste(Species, '<br>', "Sepal width:", 'Sepal.Width', '<br>', "Sepal length:",'Sepal.Length'))
set.seed(100)
plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
d<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
d<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
d<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
View(d)
graph = plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
graph = plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length, size = Sepal.Length)
graph<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length,         size = Sepal.Length)
graph<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length,         size = Sepal.Length)
library(plotly)
graph<- plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length,         size = Sepal.Length)
View(graph)
graph<- plot_ly( x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length,         size = Sepal.Length)
plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length,         size = Sepal.Length)
plot_ly(data, x = Sepal.Width, y = Sepal.Length, text = hover, mode = "markers", color = Sepal.Length,size =  Sepal.Length)
plot_ly(data, x = Sepal.Width, y = Sepal.Length,
text = hover,
mode = "markers",
color = Sepal.Length,
size =  Sepal.Length)
map<- plot_ly(data, x = Sepal.Width, y = Sepal.Length,
map<- plot_ly(data, x = Sepal.Width, y = Sepal.Length,
text = hover,
mode = "markers",
color = Sepal.Length,
size =  Sepal.Length)
s
map<- plot_ly(data, x = Sepal.Width, y = Sepal.Length,
text = hover,
mode = "markers",
color = Sepal.Length,
size =  Sepal.Length)
layout(title = Sepal length and width)
map<- plot_ly(data, x = Sepal.Width, y = Sepal.Length,
text = hover,
mode = "markers",
color = Sepal.Length,
size =  Sepal.Length) %>%
layout(title = "Sepal length and width")
plot_ly(data, x = Sepal.Width, y = Sepal.Length,
text = hover,
mode = "markers",
color = Sepal.Length,
size =  Sepal.Length) %>%
layout(title = "Sepal length and width")
shiny::runApp('Documents/a8-building-applications')
shiny::runApp('Documents/a8-building-applications')
data<- iris
View(data)
library(shiny)
library(plotly)
library(dplyr)
data<- iris
shinyServer(function(input, output) {
output$main_plot <- renderPlot({
graph<- hist(data$Sepal.Length,
probability = TRUE,
breaks = as.numeric(input$n_breaks),
col = c("red", "yellow", "green", "violet", "orange",
"blue", "pink", "cyan"),
xlab = "Sepal Length",
main = "Iris dataset")
if (input$Sepal_length) {
rug(data$Sepal.Length)
}
if (input$density) {
dens <- density(data$Sepal.Length,
adjust = input$bw_adjust)
lines(dens, col = "blue")
}
return(graph)
})
})
library(shiny)
library(plotly)
shinyUI(bootstrapPage(
selectInput(input = "n_breaks",
choices = c(1,2,3,4,5,6,7,8,9,10),
label = list("Sepal Length"),
selected = 2),
checkboxInput(input = "Sepal_length",
label = strong("Show sepal length"),
value = FALSE),
checkboxInput(input = "density",
label = strong("Show density estimate of Sepal length"),
value = FALSE),
plotOutput(outputId = "main_plot", width = "20%", height = "15cm"),
conditionalPanel(condition = "input$density == true",
sliderInput(input = "bw_adjust",
label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
)
))
shiny::runApp('Documents/INFO_a8')
mean(data$Sepal.Length)
shiny::runApp('Documents/INFO_a8')
shiny::runApp('Documents/INFO_a8')
shiny::runApp('Documents/INFO_a8')
shiny::runApp('Documents/INFO_a8')
shiny::runApp('Documents/INFO_a8')
shiny::runApp('Documents/INFO_a8')
x<- (12,14,17,10,8,9,12,14,18,16)
y<- (2,1,0,3,5,3,4,3,2,0,2)
x<- c(12,14,17,10,8,9,12,14,18,16)
y<- c(2,1,0,3,5,3,4,3,2,0,2)
length(x)
length(y)
x<- c(12,14,17,10,8,9,12,14,18,16)
y<- c(2,1,0,3,5,3,4,2,0,2)
plot_ly(x,y)
library(plotly)
plot_ly(x,y)
plot_ly(x = x,y = y, type = "scatterplot")
data.frame(x,y)
b<-data.frame(x,y)
View(b)
plot_ly(x = x,y = y, type = "scatter")
x<- c(12,14,17,10,8,9,12,14,18,16)
y<- c(2,1,0,3,5,3,4,2,0,2)
plot_ly(b, type = "scatter")
library(plotly)
b<-data.frame(x,y)
View(b)
b<-data.frame(x,y)
plot_ly(b, type = "scatter")
mean(x)
mean(y)
sd(x)
sd(y)
cor(x,y)
cor.test(x,y)
1.37/1.889
1.37/1.889 * 0.725
0.526ï¼Š1.889
0.526*1.889
1.37 - 0.993
setwd("/Users/Edward/Documents/Final-Project-X/data")
read.csv("summarized data.csv")
View(newdata)
newdata$UGDS_HISP <- as.numeric(as.character(newdata$UGDS_HISP))
newdata$UGDS_WHITE<- as.numeric(as.character(newdata$UGDS_WHITE))
newdata$UGDS_BLACK<- as.numeric(as.character(newdata$UGDS_BLACK))
newdata$UGDS_ASIAN<- as.numeric(as.character(newdata$UGDS_ASIAN))
read.csv("summarized data.csv")
View(newdata)
library(dplyr)
library(plotly)
setwd("/Users/Edward/Documents/Final-Project-X/data")
write.csv(newdata, "Summarized data.csv")
newdata<- read.csv("Summarized data.csv")
newdata$hover <- paste(newdata$INSTNM, "has", newdata$ADM_RATE, "percent of admission rate",
'<br>', "Location:",newdata$CITY, newdata$ZIP)
cols <- RColorBrewer::brewer.pal(3, "Set1")
newdata$ADM_RATE <- as.numeric(as.character(newdata$ADM_RATE))
build_map<- function(add, school_name, ){
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
plot_ly(add, lat = LATITUDE, lon = LONGITUDE,
text = hover,
colors = cols,
color = ADM_RATE,
opacity = 0.5, na.rm = TRUE,
type = 'scattergeo',
locationmode = 'USA-states',
mode = "markers",
marker = m) %>%
layout(title = "US College Cards", geo = g)
}
add = newdata
build_map<- function(add, school_name, ){
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
plot_ly(add, lat = LATITUDE, lon = LONGITUDE,
text = hover,
colors = cols,
color = ADM_RATE,
opacity = 0.5, na.rm = TRUE,
type = 'scattergeo',
locationmode = 'USA-states',
mode = "markers",
marker = m) %>%
layout(title = "US College Cards", geo = g)
}
shiny::runApp('~/Documents/Final-Project-X/shiny-app')
newdata$UGDS_HISP <- as.numeric(as.character(newdata$UGDS_HISP))
newdata$UGDS_WHITE<- as.numeric(as.character(newdata$UGDS_WHITE))
newdata$UGDS_BLACK<- as.numeric(as.character(newdata$UGDS_BLACK))
newdata$UGDS_ASIAN<- as.numeric(as.character(newdata$UGDS_ASIAN))
sum_hisp<- sum(newdata$UGDS_HISP)
sum_white<- sum(newdata$UGDS_WHITE)
sum_black<- sum(newdata$UGDS_BLACK)
sum_asian<- sum(newdata$UGDS_ASIAN)
sum_asian
setwd("/Users/Edward/Documents/Final-Project-X/data")
read.csv("summarized data.csv")
View(newdata)
college<- function(name) {
newdata%>%
filter()%>%
select(INSTNM, contains = 'name')
}
college("University of Washington")
build_map<- function(add){
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
plot_ly(add, lat = LATITUDE, lon = LONGITUDE,
text = hover,
colors = cols,
color = ADM_RATE,
opacity = 0.5, na.rm = TRUE,
type = 'scattergeo',
locationmode = 'USA-states',
mode = "markers",
size = ADM_RATE,
marker = m) %>%
layout(title = "US College Cards", geo = g)
}
build_map(newdata)
build_map<- function(add){
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
plot_ly(add, lat = LATITUDE, lon = LONGITUDE,
text = hover,
colors = cols,
color = ADM_RATE,
opacity = 0.5, na.rm = TRUE,
type = 'scattergeo',
locationmode = 'USA-states',
mode = "markers",
size = ADM_RATE *100,
marker = m) %>%
layout(title = "US College Cards", geo = g)
}
build_map(newdata)
build_map<- function(add){
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
plot_ly(add, lat = LATITUDE, lon = LONGITUDE,
text = hover,
colors = cols,
color = ADM_RATE,
opacity = 0.5, na.rm = TRUE,
type = 'scattergeo',
locationmode = 'USA-states',
mode = "markers",
marker = m) %>%
layout(title = "US College Cards", geo = g)
}
build_map(newdata)
build_map<- function(add){
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
plot_ly(add, lat = LATITUDE, lon = LONGITUDE,
text = hover,
colors = cols,
color = ADM_RATE,
opacity = 0.5, na.rm = TRUE,
type = 'scattergeo',
locationmode = 'USA-states',
mode = "markers",
drop( ADM_RATE = NA),
marker = m) %>%
layout(title = "US College Cards", geo = g)
}
build_map(newdata)
build_map<- function(add){
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
plot_ly(add, lat = LATITUDE, lon = LONGITUDE,
text = hover,
colors = cols,
color = ADM_RATE,
opacity = 0.5, na.rm = TRUE,
type = 'scattergeo',
locationmode = 'USA-states',
mode = "markers",
drop( ADM_RATE = NA),
marker = m) %>%
layout(title = "US College Cards", geo = g)
}
build_map(newdata)
build_map<- function(add){
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
plot_ly(add, lat = LATITUDE, lon = LONGITUDE,
text = hover,
colors = cols,
color = ADM_RATE,
opacity = 0.5, na.rm = TRUE,
type = 'scattergeo',
locationmode = 'USA-states',
mode = "markers",
drop(ADM_RATE = FALSE),
marker = m) %>%
layout(title = "US College Cards", geo = g)
}
build_map(newdata)
newdata%>%
filter(STABBR = states)
newdata%>%
filter(STABBR = 'states')
newdata%>%
filter(STABBR == 'states')
build_map(newdata, "WA")
library(dplyr)
library(plotly)
setwd("/Users/Edward/Documents/Final-Project-X/data")
#data<- read.csv("Most+Recent+Cohorts+(All+Data+Elements).csv")
## url: "https://catalog.data.gov/dataset/college-scorecard/resource/4a18482a-8617-4bf9-8c37-0da0aa2ac3f8"
newdata<- data %>% filter() %>%
select(UNITID, INSTNM, CITY, STABBR, ZIP, AccredAgency, INSTURL, NPCURL, main, LATITUDE,
LONGITUDE, ADM_RATE, SATVR25, SATVR75, SATMT25, SATMT75, SATWR25, SATWR75,
SATVRMID,SATMTMID,SATWRMID, ACTCM25, ACTCM75, ACTEN25, ACTEN75, ACTMT25,
ACTMT75, ACTWR25, ACTWR75, ACTCMMID, ACTENMID, ACTMTMID, ACTWRMID, SAT_AVG,
COSTT4_A, TUITIONFEE_IN, TUITIONFEE_OUT, UGDS_WHITE, UGDS_HISP, UGDS_BLACK,
UGDS_ASIAN)
write.csv(newdata, "Summarized data.csv")
newdata<- read.csv("Summarized data.csv")
##how to put known 1st, 2nd, 3rd quantile into map? or let R knows that they are quantiles???
add = newdata
newdata$hover <- paste(newdata$INSTNM, "has", newdata$ADM_RATE, "percent of admission rate",
'<br>', "Location:",newdata$CITY, newdata$ZIP)
cols <- RColorBrewer::brewer.pal(3, "Set1")
newdata$ADM_RATE <- as.numeric(as.character(newdata$ADM_RATE))
build_map<- function(add, states){
m <- list(
colorbar = list(title = "Admission Rate"),
size = 5, opacity = 0.8, symbol = 'circle')
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showland = TRUE,
landcolor = toRGB("gray95"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5)
plot_ly(
add%>%
filter(STABBR == states)
, lat = LATITUDE, lon = LONGITUDE,
text = hover,
colors = cols,
color = ADM_RATE,
opacity = 0.5, na.rm = TRUE,
type = 'scattergeo',
locationmode = 'USA-states',
mode = "markers",
marker = m) %>%
layout(title = "US College Cards", geo = g)
}
build_map(newdata, 'WA')
